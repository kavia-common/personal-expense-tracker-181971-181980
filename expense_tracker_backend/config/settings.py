"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0ku_as45vs5isd^px=t#m8g#^*x7f=w#gw-xb^t@^-pom)r^t6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '.kavia.ai',
    'localhost',
    '127.0.0.1',
    'testserver',
    # Include explicit dev hosts/ports if needed
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'api'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
#
# Priority:
# 1) If DATABASE_URL is provided, use it directly.
# 2) Else, use PostgreSQL from POSTGRES_HOST, POSTGRES_PORT (default: 5001), POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD.
# 3) Fallback to SQLite if none are set.

def _build_db_from_env():
    database_url = os.getenv("DATABASE_URL")

    # If DATABASE_URL is provided, prefer it.
    if database_url:
        # Support both psycopg3 (psycopg) and legacy schemes in Django
        return {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'OPTIONS': {},
                'NAME': '',
                'USER': '',
                'PASSWORD': '',
                'HOST': '',
                'PORT': '',
                'CONN_MAX_AGE': 60,
                'ATOMIC_REQUESTS': False,
            },
            'DATABASE_URL': database_url,  # informational only
        }

    host = os.getenv("POSTGRES_HOST")
    db = os.getenv("POSTGRES_DB")
    user = os.getenv("POSTGRES_USER")
    password = os.getenv("POSTGRES_PASSWORD")
    port = os.getenv("POSTGRES_PORT", "5001")

    # If we have at least host and db, assume Postgres should be used
    if host and db and user and password:
        return {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': db,
                'USER': user,
                'PASSWORD': password,
                'HOST': host,
                'PORT': port,
                'CONN_MAX_AGE': 60,
                'ATOMIC_REQUESTS': False,
            }
        }

    # Fallback to SQLite for local development if nothing is configured
    return {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Initialize DATABASES based on env
DATABASES = _build_db_from_env()

# If using DATABASE_URL, let Django parse it via dj-database-url if present; otherwise, attempt a basic parse.
_db_url = os.getenv("DATABASE_URL")
if _db_url:
    try:
        import dj_database_url  # Optional: if present, it will parse DATABASE_URL
        DATABASES['default'] = dj_database_url.parse(_db_url, conn_max_age=60)
    except Exception:
        # Fallback simple parsing if dj-database-url isn't installed
        parsed = urlparse(_db_url)
        if parsed.scheme.startswith("postgres"):
            DATABASES['default'] = {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': (parsed.path or '').lstrip('/'),
                'USER': parsed.username or '',
                'PASSWORD': parsed.password or '',
                'HOST': parsed.hostname or '',
                'PORT': parsed.port or '',
                'CONN_MAX_AGE': 60,
            }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True
# If you need credentialed requests from the frontend, set this True and explicitly list origins.
CORS_ALLOW_CREDENTIALS = True

# Explicit allowlist for common dev frontends; this complements the allow-all above.
# Keep the known preview origin on port 3000 to ensure browser requests are permitted.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://vscode-internal-39113-beta.beta01.cloud.kavia.ai:3000",
]
# If the environment provides a FRONTEND_ORIGIN, include it as well.
_frontend_origin = os.getenv("FRONTEND_ORIGIN")
if _frontend_origin and _frontend_origin not in CORS_ALLOWED_ORIGINS:
    CORS_ALLOWED_ORIGINS.append(_frontend_origin)

# CSRF trusted origins to support cookie-based or session operations from the frontend
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
if _frontend_origin:
    # Normalize to scheme+host without trailing slash for Django's expected format
    CSRF_TRUSTED_ORIGINS.append(_frontend_origin.rstrip('/'))

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
X_FRAME_OPTIONS = 'ALLOWALL'

# REST framework global settings:
# - Use JWT Authentication by default
# - Require authentication by default for API endpoints
# - Permit unauthenticated access to health and documentation views via explicit permission classes on those views/routes
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

# SimpleJWT settings: keep defaults but allow environment overrides for token lifetimes if needed later.
# Note: Do not hardcode secrets here; use environment variables if customizing.
from datetime import timedelta  # noqa: E402
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_ACCESS_MINUTES', '30'))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('JWT_REFRESH_DAYS', '7'))),
}
